---
title: "C2C #2: Kuhn Poker"
---
## Kuhn Poker
Kuhn Poker is a lot like the Clairvoyance Poker game from the last section, except instead of P1 always getting card 1 and P2 getting a card from {0, 2}, we go back to a random deal from the entire deck of {0, 1, 2}. 

The betting rules are the same: 

- Both players ante 1 chip, so the starting pot is 2

- Each player has 1 remaining chip to use for betting 

- Player 1 acts first and can either Bet 1 or Check (Pass)

Play continues until one of these betting sequences happens, which ends the hand: 

- **Check Check:** Hands go to *showdown* and player with highest card wins 1 (the ante)

- **Bet Call:** Hands go to *showdown* and player with highest card wins 2 (the ante + bet)

- **Bet Fold:** Player who bets wins 1 (the ante)

Here is a list of all possible betting sequences:  

| P1  | P2  | P1 | Winner       |
|------------|-----------|-----------|----------|
| Bet        | Fold     |          | P1 (+1) |
| Bet        | Call        |          | Higher Card (+2)|
| Check     | Check     |          | Higher Card (+1)|
| Check     | Bet       | Fold    | P2 (+1) |
| Check     | Bet        | Call       | Higher Card (+2)|

### Kuhn logic into code 

## Game states
There are six possible deals in Kuhn Poker: 

- [2, 1]
- [2, 0]
- [1, 0]
- [1, 2]
- [0, 1]
- [0, 2]

Each player has two decision points in the game. 

Player 1 has:

- Starting action
- P1 Checks, P2 Bets

Player 2 has: 
- After P1 Bets
- After P1 Checks

With six possible deals and two decision points per player, there are 12 possible states of the game for each player. For P1, we have: 

1. [2, 1] acting first
2. [2, 0] acting first
3. [1, 0] acting first
4. [1, 2] acting first
5. [0, 1] acting first
6. [0, 2] acting first
7. [2, 1] P1 Check, P2 Bet, P1 action
8. [2, 0] P1 Check, P2 Bet, P1 action
9. [1, 0] P1 Check, P2 Bet, P1 action
10. [1, 2] P1 Check, P2 Bet, P1 action
11. [0, 1] P1 Check, P2 Bet, P1 action
12. [0, 2] P1 Check, P2 Bet, P1 action

## Information sets
However, the true state of the game (i.e., which card the opponent has) is not actually known to the players! 

Therefore from each player's perspective, we can combine certain states together. In this game, we can combine sets of two states together that represent both possibilities for the opponent's cards. 

For P1: 
1. [2] acting first (combines [2, 1] and [2, 0])
2. [1] acting first (combines [1, 0] and [1, 2])
3. [0] acting first (combines [0, 1] and [0, 2])
4. [2] P1 Check, P2 Bet, P1 action (combines [2, 1] and [2, 0])
5. [1] P1 Check, P2 Bet, P1 action (combines [1, 0] and [1, 2])
6. [0] P1 Check, P2 Bet, P1 action (combines [0, 1] and [0, 2])

From P1's perspective, only their own private card is known and they can only make decisions based on knowledge of this card.

For example, if Player 1 is dealt a [1] and Player 2 dealt a [0] or P1 dealt [1] and P2 dealt [2], P1 is facing the decision of having a [1] and starting the betting not knowing what the opponent has. 

Likewise if Player 2 is dealt a [1] and is facing a bet, he must make the same action regardless of what the opponent has because from his perspective he only knows his own card and the action history. 

We define an **information set** as the set of information used to make decisions at a particular point in the game. In Kuhn Poker, it is equivalent to the card of the acting player and the history of actions up to that point. 

When writing game history sequences, we use "k" to define check, "b" for bet", "f" for fold, and "c" for call. So for Player 1 acting first with a K, the information set is "K". For Player 2 acting second with an A and facing a bet, the information set is "Ab". For Player 2 acting second with a A and facing a check, the information set is "Ak". For Player 1 with a K checking and facing a bet from Player 2, the information set is "Kkb". 

The shorthand version in the case of Kuhn Poker is to combine "k" and "f" into "p" for pass and to combine "b" and "c" into "b" for bet. Pass indicates putting no money into the pot and bet indicates putting $1 into the pot.

### Add infoset logic
Add infoset logic

Figure out obvious infosets
Then make 1 agent random on others
And make 1 rules-based 

## Solving analytically

## Payoff matrix
Analytically solving all but the smallest games is not very feasible -- a faster way to compute the strategy for this game is putting it into normal form.  

Now that we have defined information sets, we see that each player in fact has two information sets per card that he can be dealt, which is a total of 6 information sets per player since each can be dealt a card in {0, 1, 2}. (If the game was played with a larger deck size, then we would have $2N$ information sets, where $N$ is the deck size.)

Each information set has two actions possible, which are essentially "do not put money in the pot" (check when acting first/facing a check or fold when facing a bet -- we call this pass) and "put in 1 chip" (bet when acting first or call when facing a bet -- we call this bet). 

The result is that each player has $$ 2^6 = 64 $$ total combinations of pure strategies. Think of this as each player having a switch between pass/bet for each of the 6 information sets that can be on or off and deciding all of these in advance. 

Here are a few examples of the 64 strategies for Player 1 (randomly selected): 

1. A - bet, Apb - bet, K - bet, Kpb - bet, Q - bet, Qpb - bet 
2. A - bet, Apb - bet, K - bet, Kpb - bet, Q - bet, Qpb - pass 
3. A - bet, Apb - bet, K - pass, Kpb - bet, Q - bet, Qpb - bet 
4. A - bet, Apb - pass, K - bet, Kpb - pass, Q - bet, Qpb - bet 
5. A - bet, Apb - pass, K - bet, Kpb - bet, Q - bet, Qpb - bet 
6. A - pass, Apb - bet, K - bet, Kpb - bet, Q - pass, Qpb - bet 

We can create a $64 \times 64$ payoff matrix with every possible strategy for each player on each axis and the payoffs inside.

| P1/P2  | P2 Strat 1  | P2 Strat 2 | ... | P2 Strat 64 |
|---|---|---|---|---|
| **P1 Strat 1**  | EV(1,1)  | EV(1,2)  | ...  | EV(1,64)  |
| **P1 Strat 2**  | EV(2,1)  | EV(2,2) | ...  | EV(2,64) |
| ...  | ...  | ...  | ...  | ... |
| **P1 Strat 64** | EV(64,1)  | EV(64,2)  | ...  | EV(64,64) |

This matrix has 4096 entries and we turn to linear programming to find a solution.

### Solving with linear programming 
The general way to solve a game matrix of this size is with linear programming, which is essentially a way to optimize a linear objective, which we'll define below. This kind of setup could be used in a problem like minimizing the cost of food while still meeting objectives like a minimum number of calories and maximum number of carbohydrates and sugar. 

We can define Player 1's strategy as $$ x $$, which is a vector of size 64 corresponding to the probability of playing each strategy. We do the same for Player 2 as $$ y $$. 

We define the payoff matrix as $$ A $$ with the payoffs written with respect to Player 1. 

$$ A = 
\quad
\begin{bmatrix} 
EV(1,2) & EV(1,2) & ... & EV(1,64) & \\
EV(2,1) & EV(2,2) & ... & EV(2,64) & \\
... & ... & ... & ... & \\
EV(64,1) & EV(64,2) & ... & EV(64,64) & \\
\end{bmatrix}
$$

We can use payoff matrix $$ B $$ for payoffs written with respect to Player 2 -- in zero-sum games like poker, $$ A = -B$$, so it's easiest to just use $$A$$. 

We can write the Kuhn payoff matrix: 

We can also define a constraint matrix for each player:

Let P1's constraint matrix = $$ E $$ such that $$ Ex = e $$ 

Let P2's constraint matrix = $$ F $$ such that $$ Fy = f $$ 

The only constraint we have at this time is that the sum of the strategies is 1 since they are a probability distribution (all probability distributions must add up to 1, for example the probabilities of getting heads (0.5) and tails (0.5) sum to 1), so $$E$$ and $$F$$ will just be vectors of 1's and $$e$$ and $$f$$ will $$ = 1 $$. In effect, this is just saying that each player has 64 strategies and should play each of those some % of the time (some will be 0) and these %s have to add up to 1 since this is a probability distribution and probabilities always add up to 1. 

In the case of Kuhn Poker, for **step 1** we look at a best response for Player 2 (strategy y) to a fixed Player 1 (strategy x) and have the following. Best response means best possible strategy for Player 2 given Player 1's fixed strategy. 

$$ \max_{y} (x^TB)y $$

$$ \text{Such that: } Fy = f, y \geq 0 $$ 

We are looking for the strategy parameters $$y$$ that maximize the payoffs for Player 2. $$x^TB$$ is the transpose of $$x$$ multiplied by $$B$$, so the strategy of Player 1 multiplied by the payoffs to Player 2. Player 2 then can choose $$y$$ to maximize his payoffs.

We substitute $$-A$$ for $$B$$ so we only have to work with the $$A$$ matrix. 

$$ = \max_{y} (x^T(-A))y  $$

We can substitute $$-A$$ with $$A$$ and change our optimization to minimizing instead of maximizing. 

$$ = \min_{y} (x^T(A))y $$

$$ \text{Such that: } Fy = f, y \geq 0 $$ 

In words, this is the expected value of the game from Player 2's perspective because the $$ x $$ and $$ y $$ matrices represent the probability of ending in each state of the payoff matrix and the $$ B == -A $$ value represents the payoff matrix itself. So Player 2 is trying to find a strategy $$ y $$ that maximizes the payoff of the game from his perspective against a fixed $$ x $$ player 1 strategy. 

For **step 2**, we look at a best response for Player 1 (strategy x) to a fixed Player 2 (strategy y) and have: 

$$ \max_{x} x^T(Ay) $$

$$ \text{Such that: } x^TE^T = e^T, x \geq 0 $$

Note that now Player 1 is trying to maximize this equation and Player 2 is trying to minimize this same thing. 

For **step 3**, we can combine the above 2 parts and now allow for $$ x $$ and $$ y $$ to no longer be fixed, which leads to the below minimax equation. In 2-player zero-sum games, the minimax solution is the same as the Nash equilibrium solution. We call this minimax because each player minimizes the maximum payoff possible for the other -- since the game is zero-sum, they also minimize their own maximum loss (maximizing their minimum payoff). This is also why the Nash equilibrium strategy in poker can be thought of as a "defensive" strategy, since by minimizing the maximum loss, we aren't trying to maximally exploit.

$$ \min_{y} \max_{x} [x^TAy] $$

$$ \text{Such that: } x^TE^T = e^T, x \geq 0, Fy = f, y \geq 0 $$

We can solve this with linear programming, but this would involve a huge payoff matrix $$A$$ and length 64 strategy vectors for each player. There is a much more efficient way! 

## Solving by simplifying the matrix 

Kuhn Poker is the most basic poker game possible and requires solving a $64 \times 64$ matrix. While this is feasible, any reasonably sized poker game would blow up the matrix size. 

We can improve on this form by considering the structure of the game tree. Rather than just saying that the constraints on the $$ x $$ and $$ y $$ matrices are that they must sum to 1 as we did above, we can redefine these conditions according to the structure of the game. 

### Simplified Matrices for Player 1 with Behavioral Strategies
Previously we defined $$ E = F = \text{Vectors of } 1 $$, which is the most basic constraint that all probabilities have to sum to 1. 

However, we know that some strategic decisions can only be made after certain other decisions have already been made. For example, Player 2's actions after a Player 1 bet can only be made after Player 1 has first bet! 

Now we can redefine the $$ E $$ constraint as follows for Player 1:

| Infoset/Strategies | 0  | A_b | A_p  | A_pb  | A_pp  | K_b  | K_p  | K_pb  | K_pp  | Q_b  | Q_p  | Q_pb  | Q_pp  |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| 0  | 1  |   |   |   |   |   |   |   |   |   |   |   |   |
| A  | -1  | 1  | 1  |   |   |   |   |   |   |   |   |   |   |
| Ap  |   |   | -1  | 1  | 1  |   |   |   |   |   |   |   |   |
| K  | -1   |   |   |   |   | 1  | 1  |   |   |   |   |   |   |
| Kp  |   |   |   |   |   |   | -1  | 1  | 1  |   |   |   |   |
| Q  | -1  |   |   |   |   |  |   |   |   | 1  | 1  |   |   |
| Qp  |   |   |   |   |   |   |   |   |   |   | -1  | 1  | 1  |

We see that $$ E $$ is a $$ 7 \text{x} 13 $$ matrix, representing the root of the game and the 6 information sets vertically and the root of the game and the 12 possible strategies horizontally. The difference now is that we are using **behavioral strategies** instead of **mixed strategies**. Mixed strategies meant specifying a probability of how often to play each of 64 possible pure strategies. Behavioral strategies assign probability distributions over strategies at each information set. Kuhn's Theorem (the same Kuhn) states that in a game where players may remember all of their previous moves/states of the game available to them, for every mixed strategy there is a behavioral strategy that has an equivalent payoff (i.e. the strategies are equivalent). 

Within the matrix, the [0,0] entry is a dummy and filled with a 1. Each row has a single -1, which indicates the strategy (or root) that must precede the infoset. For example, the A has a -1 entry at the root (0) and 1 entries for A_b and A_p since the A must precede those strategies. The $$1$$ entries represent strategies that exist from a certain infoset. In matrix form we have $$ E $$ as below: 

$$ E = 
\quad
\begin{bmatrix} 
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
-1 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & -1 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
-1 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & -1 & 1 & 1 & 0 & 0 & 0 & 0 \\
-1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & -1 & 1 & 1 \\
\end{bmatrix}
$$

$$ x $$ is a $$ 13 \text{x} 1 $$ matrix of probabilities to play each strategy.

$$ x = 
\quad
\begin{bmatrix} 
1 \\
A_b \\
A_p \\
A_{pb} \\
A_{pp} \\
K_b \\
K_p \\
K_{pb} \\
K_{pp} \\
Q_b \\
Q_p \\
Q_{pb} \\
Q_{pp} \\
\end{bmatrix}
$$

We have finally that $$ e $$ is a $$ 7 \text{x} 1 $$ fixed matrix. 

$$ e = 
\quad
\begin{bmatrix} 
1 \\
0 \\
0 \\
0 \\
0 \\
0 \\
0 \\
\end{bmatrix}
$$

So we have overall:

$$
\quad
\begin{bmatrix} 
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
-1 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & -1 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
-1 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & -1 & 1 & 1 & 0 & 0 & 0 & 0 \\
-1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & -1 & 1 & 1 \\
\end{bmatrix}

\quad
\begin{bmatrix} 
1 \\
A_b \\
A_p \\
A_{pb} \\
A_{pp} \\
K_b \\
K_p \\
K_{pb} \\
K_{pp} \\
Q_b \\
Q_p \\
Q_{pb} \\
Q_{pp} \\
\end{bmatrix}

= 

\quad
\begin{bmatrix} 
1 \\
0 \\
0 \\
0 \\
0 \\
0 \\
0 \\
\end{bmatrix}
$$

### What do the matrices mean?

To understand how the matrix multiplication works and why it makes sense, let's look at each of the 7 multiplications (i.e., each row of $$ E $$ multiplied by the column vector of $$ x $$ $$ = $$ the corresponding row in the $$ e $$ column vector.

**Row 1**

We have $$ 1 \text{x} 1 $$ = 1. This is a "dummy".

**Row 2**

$$ -1 + A_b + A_p = 0 $$
$$ A_b + A_p = 1 $$

This is the simple constraint that the probability between the initial actions in the game when dealt an A must sum to 1. 

**Row 3**
$$ -A_p + A_{pb} + A_{pp} = 1 $$
$$ A_{pb} + A_{pp} = A_p $$

The probabilities of Player 1 taking a bet or pass option with an A after initially passing must sum up to the probability of that initial pass $$ A_p$$. 

The following are just repeats of Rows 2 and 3 with the other cards. 

**Row 4**
 
$$ -1 + K_b + K_p = 0 $$

$$ K_b + K_p = 1 $$

The probabilities of Player 1's initial actions with a K must sum to 1. 

**Row 5**
 
$$ -K_p + K_{pb} + K_{pp} = 1 $$

$$ K_{pb} + K_{pp} = K_p $$

The probabilities of Player 1 taking a bet or pass option with a K after initially passing must sum up to the probability of that initial pass $$ K_p$$. 

**Row 6**
 
$$ -1 + Q_b + Q_p = 0 $$

$$ Q_b + Q_p = 1 $$

The probabilities of Player 1's initial actions with a Q must sum to 1. 

**Row 7**
 
$$ -Q_p + Q_{pb} + Q_{pp} = 1 $$

$$ Q_{pb} + Q_{pp} = Q_p $$

The probabilities of Player 1 taking a bet or pass option with a Q after initially passing must sum up to the probability of that initial pass $$ Q_p$$. 

### Simplified Matrices for Player 2

And $$ F $$ works similarly for Player 2:

| Infoset/Strategies | 0  | A_b(ab) | A_p(ab)  | A_b(ap)  | A_p(ap)  | K_b(ab)  | K_p(ab)  | K_b(ap)  | K_p(ap)  | Q_b(ab)  | Q_p(ab)  | Q_b(ap)  | Q_p(ap)  |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| 0  | 1  |   |   |   |   |   |   |   |   |   |   |   |   |
| Ab  | -1  | 1  | 1  |   |   |   |   |   |   |   |   |   |   |
| Ap  | -1   |   |   | 1  | 1  |   |   |   |   |   |   |   |   |
| Kb  | -1   |   |   |   |   | 1  | 1  |   |   |   |   |   |   |
| Kp  | -1  |   |   |   |   |   |   | 1  | 1  |   |   |   |   |
| Qb  | -1  |   |   |   |   |  |   |   |   | 1  | 1  |   |   |
| Qp  | -1  |   |   |   |   |   |   |   |   |   |   | 1  | 1  |

From the equivalent analysis as we did above with $$ Fx = f$$, we will see that each pair of 1's in the $$ F $$ matrix will sum to $$ 1 $$ since they are the 2 options at the information set node. 

### Simplified Payoff Matrix

Now instead of the $$ 64 \text{x} 64 $$ matrix we made before, we can represent the payoff matrix as only $$ 6 \text{x} 2 \text{ x } 6\text{x}2 = 12 \text{x} 12 $$. (It's actually $$13 \text{x} 13$$ because we use a dummy row and column.) These payoffs are the actual results of the game when these strategies are played from the perspective of Player 1, where the results are in {-2, -1, 1, 2}. 

| P1/P2 | 0  | A_b(ab) | A_p(ab)  | A_b(ap)  | A_p(ap)  | K_b(ab)  | K_p(ab)  | K_b(ap)  | K_p(ap)  | Q_b(ab)  | Q_p(ab)  | Q_b(ap)  | Q_p(ap)  |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| 0  |   |   |   |   |   |   |   |   |   |   |   |   |   |
| A_b  |   |   |   |   |   | 2  | 1  |   |   | 2  | 1  |   |   |
| A_p  |   |   |   |   |   |   |   |   | 1  |   |   |   | 1  |
| A_pb  |    |   |   |   |   |   |   | 2 |   |   |   | 2  | 0  |
| A_pp  |    |   |   |   |   |   |   | -1  |   |   |   | -1  |   |
| K_b  |   | -2  | 1  |   |   |   |   |   |   | 2  | 1  |   |   |
| K_p  |   |   |   |   | -1  |  |   |   |   |   |   |   | 1  |
| K_pb  |   |   |   | -2  |   |   |   |   |   |   |   | 2  |   |
| K_pp  |   |   |   | -1  |   |   |   |   |   |   |   | -1  |   |
| Q_b  |    | -2  | 1  |  |  | -2  | 1  |   |   |   |   |   |   |
| Q_p  |   |   |   |   | -1  |   |   |   | -1  |   |   |   |   |
| Q_pb  |   |   |   | -2  |   |   |   | -2  |   |   |   |   |   |
| Q_pp  |   |   |   | -1  |   |   |   | -1  |   |   |   |   |   |

And written in matrix form: 

$$ A = 
\quad
\begin{bmatrix} 
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 2 & 1 & 0 & 0 & 2 & 1 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 1 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0 & 0 & 0 & 2 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & -1 & 0 & 0 & 0 & -1 & 0 \\
0 & -2 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 1 & 0 & 0 \\
0 & 0 & 0 & 0 & -1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\
0 & 0 & 0 & -2 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0 \\
0 & 0 & 0 & -1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & -1 & 0 \\
0 & -2 & 1 & 0 & 0 & -2 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & -1 & 0 & 0 & 0 & -1 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & -2 & 0 & 0 & 0 & -2 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & -1 & 0 & 0 & 0 & -1 & 0 & 0 & 0 & 0 & 0 \\
\end{bmatrix}
$$

We could even further reduce this by eliminating dominated strategies:

| P1/P2 | 0  | A_b(ab) | A_b(ap)  | A_p(ap)  | K_b(ab)  | K_p(ab)  | K_b(ap)  | K_p(ap)  | Q_b(ab)  | Q_p(ab)  | Q_b(ap)  | Q_p(ap)  |
|---|---|---|---|---|---|---|---|---|---|---|---|---|
| 0  |   |   |   |   |   |   |   |   |   |   |   |   |
| A_b  |   |   |   |   | 2  | 1  |   |   | 2  | 1  |   |   |
| A_p  |   |   |   |   |   |   |   | 1  |   |   |   | 1  |
| A_pb  |    |   |   |   |   |   | 2 |   |   |   | 2  | 0  |
| K_p  |   |   |   | -1  |  |   |   |   |   |   |   | 1  |
| K_pb  |   |   | -2  |   |   |   |   |   |   |   | 2  |   |
| K_pp  |   |   | -1  |   |   |   |   |   |   |   | -1  |   |
| Q_b  |    | 1  |  |  | -2  | 1  |   |   |   |   |   |   |
| Q_p  |   |   |   | -1  |   |   |   | -1  |   |   |   |   |
| Q_pp  |   |   | -1  |   |   |   | -1  |   |   |   |   |   |

For simplicity, let's stick with the original $$ A $$ payoff matrix and see how we can solve for the strategies and value of the game. 

### Simplified Linear Program

Our linear program is now updated as follows. It is the same general form as before, but now our $$ E $$ and $$ F $$ matrices have constraints based on the game tree and the payoff matrix $$ A $$ is smaller, evaluating when player strategies coincide and result in payoffs, rather than looking at every possible set of pure strategic options as we did before:

$$ \min_{y} \max_{x} [x^TAy] $$

$$ \text{Such that: } x^TE^T = e^T, x \geq 0, Fy = f, y \geq 0 $$

MATLAB code is available to solve this linear program where A, E, e, F, and f are givens and we are trying to solve for x and y. The code also includes variables p and q, which we don't go into here except for the first value of the p vector, which is the game value. 

```matlab
%givens
A=[0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,2,1,0,0,2,1,0,0;
    0,0,0,0,0,0,0,0,1,0,0,0,1;
    0,0,0,0,0,0,0,2,0,0,0,2,0;
    0,0,0,0,0,0,0,-1,0,0,0,-1,0;
    0,-2,1,0,0,0,0,0,0,2,1,0,0;
    0,0,0,0,-1,0,0,0,0,0,0,0,1;
    0,0,0,-2,0,0,0,0,0,0,0,2,0;
    0,0,0,-1,0,0,0,0,0,0,0,-1,0;
    0,-2,1,0,0,-2,1,0,0,0,0,0,0;
    0,0,0,0,-1,0,0,0,-1,0,0,0,0;
    0,0,0,-2,0,0,0,-2,0,0,0,0,0;
    0,0,0,-1,0,0,0,-1,0,0,0,0,0]/6.;

F=[1,0,0,0,0,0,0,0,0,0,0,0,0;
    -1,1,1,0,0,0,0,0,0,0,0,0,0;
    -1,0,0,1,1,0,0,0,0,0,0,0,0;
    -1,0,0,0,0,1,1,0,0,0,0,0,0;
    -1,0,0,0,0,0,0,1,1,0,0,0,0;
    -1,0,0,0,0,0,0,0,0,1,1,0,0;
    -1,0,0,0,0,0,0,0,0,0,0,1,1];
f=[1;0;0;0;0;0;0];

E=[1,0,0,0,0,0,0,0,0,0,0,0,0;
    -1,1,1,0,0,0,0,0,0,0,0,0,0;
    0,0,-1,1,1,0,0,0,0,0,0,0,0;
    -1,0,0,0,0,1,1,0,0,0,0,0,0;
    0,0,0,0,0,0,-1,1,1,0,0,0,0;
    -1,0,0,0,0,0,0,0,0,1,1,0,0;
    0,0,0,0,0,0,0,0,0,0,-1,1,1];
e=[1;0;0;0;0;0;0];

%get dimensions 
dim_E = size(E)
dim_F = size(F)

%extend to cover both y and p
e_new = [zeros(dim_F(2),1);e]

%constraint changes for 2 variables
H1=[-F,zeros(dim_F(1),dim_E(1))]
H2=[A,-E']
H3=zeros(dim_E(2),1)

%bounds for both 
lb = [zeros(dim_F(2), 1);-inf*ones(dim_E(1),1)]
ub = [ones(dim_F(2), 1);inf*ones(dim_E(1),1)]

%solve lp problem 
[yp,fval,exitflag,output,lambda]=linprog(e_new,H2,H3,H1,-f,lb,ub);

%get solutions {x, y, p, q} 
x = lambda.ineqlin
y = yp(1 : dim_F(2)) 
p = yp(dim_F(2)+1 : dim_F(2)+dim_E(1)) 
q = lambda.eqlin
```

The output is: 
```matlab
Optimal solution found.


x =

    1.0000
    1.0000
         0
         0
         0
         0
    1.0000
    0.6667
    0.3333
    0.3333
    0.6667
         0
    0.6667


y =

    1.0000
    1.0000
         0
    1.0000
         0
    0.3333
    0.6667
   -0.0000
    1.0000
   -0.0000
    1.0000
    0.3333
    0.6667


p =

   -0.0556
    0.3889
    0.1111
   -0.1111
   -0.2222
   -0.3333
   -0.1667


q =

    0.1111
   -0.1111
   -0.3889
    0.2222
   -0.1111
    0.3333
    0.1667
```

The $$x$$ and $$y$$ values are a Nash equilibrium strategy solution for each player (one of many equilibrium solutions), whereby the values after the first in the vector describe the betting strategy for each of the actions for each player as shown in the vectors above. The first $$p$$ value shows the value of the game as we had calculated before in the analytical section: -0.0556. 